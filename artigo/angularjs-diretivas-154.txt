O <at-negrito>AngularJS</at-negrito> utiliza extensões de códigos HTML para possibilitar a inclusão de novos comportamentos de forma declarativa. No framework, essas extensões são chamadas de diretivas. Veja abaixo uma lista que contém algumas das principais diretivas que fazem parte do AngularJS:

<at-negrito>ngApp</at-negrito> – define sub aplicações dentro da sua aplicação.
<at-highlighter>##Highlighter##html##<!-- Exemplo ngApp -->
<div ng-app="HelloWorld">
...
</div>##Highlighter##</at-highlighter>

<at-negrito>ngInit </at-negrito>– Define dados iniciais para aplicação.
<at-highlighter>##Highlighter##html##<!-- Exemplo ngInit -->
<div ng-app="" ng-init="cores = ['azul', 'verde', 'amarelo']">
 ...
</div>##Highlighter##</at-highlighter>

<at-negrito>ngController</at-negrito> – permite o vinculo entre View e Controller.
<at-highlighter>##Highlighter##html##<!-- Exemplo ngController -->
<div ng-app = "" ng-controller = "atControl">
...
</div>##Highlighter##</at-highlighter>

<at-negrito>ngBind</at-negrito> – Permite a exibição de parâmetros dentro do código HTML.
<at-highlighter>##Highlighter##html##<!-- Exemplo ngBind -->
<div ng-app = "" ng-init="myVar = 'HelloWorld!'">
     <p ng-bind="myVar"></p>
</div>##Highlighter##</at-highlighter>

<at-negrito>ngModel</at-negrito> – Funciona de forma similar ao ngBind, porém permite também o retorno de parâmetros.
<at-highlighter>##Highlighter##html##<!-- Exemplo ngModel -->
<div ng-app = "" ng-controller="atControl">
        <p>Digite uma palavra:</p>
            <input ng-model="myVar">
        <p> Você digitou: {{myVar}}</p>
</div>##Highlighter##</at-highlighter>

<at-negrito>ngRepeat</at-negrito> – Realiza a exibição de um array dentro de elementos HTML .
<at-highlighter>##Highlighter##html##<!-- Exemplo ngRepeat -->
<div ng-app="" ng-init="cores = ['azul', 'verde', 'amarelo']">
 	<ul>	
		<li ng-repeat="x in cores">
			{{x}}
		</li>
	</ul>
</div>##Highlighter##</at-highlighter>

<at-negrito>ngClass</at-negrito> – Atribui classes dinamicamente para elementos HTML.
<at-highlighter>##Highlighter##html##<!-- Exemplo ngClass -->
...
<style>
.azul{
	color: blue;
}
.vermelho{
	color: red;
}
</style>
…
<div ng-app=””>
      <select ng-model=”cor”>
	    <option value=”azul”>Azul</option>
            <option value=”vermelhol”>Vermelho</option>
      </select>
      <p ng-class = "cor">Hello World</p>
...
</div>##Highlighter##</at-highlighter>

<at-negrito>ngClick </at-negrito>– realiza o retorno do evento do click do mouse
<at-highlighter>##Highlighter##html##<!-- Exemplo ngClick -->
...
<button ng-click="plus = plus + 1" ng-init="plus = 0">incrementar++</button>
...##Highlighter##</at-highlighter>

<at-negrito>ngIf </at-negrito>– Funcionamento padrão da expressão condicional if.
<at-highlighter>##Highlighter##html##<!-- Exemplo ngIf -->
<div ng-app="" ng-init="myVar= true">
	<div ng-if="myVar">
		<p>HelloWorld</p>
	</div>
</div>##Highlighter##</at-highlighter>

<at-negrito>ngSwitch</at-negrito> – Possibilita a seleção de um comportamento com base numa lista (Switch Case)
<at-highlighter>##Highlighter##html##<!-- Exemplo ngSwitch -->
<div ng-switch="number">
	<div ng-switch-when="1">
		<h1>1</h1>
	</div>
	<div ng-switch-when="2">
		<h1>2</h1>
	</div>
	<div ng-switch-default>
		<h1>Nenhum número encontrado!</h1>
	</div>
</div>##Highlighter##</at-highlighter>

Existem diversas diretivas como ngHide, ngShow, ngView, dentre outras, que serão apresentadas em breve. Também é possível criar diretivas próprias, executando funcionalidades programadas com objetivos pré-estabelecidos pelo programador, ou seja, você. Assim é possível criar componentes já validados, com máscaras, dentre outras infinitas funções.
<at-highlighter>##Highlighter##html##<body ng-app="HelloWorld">
       <ANYTECH></ANYTECH>
<script>
var app = angular.module("HelloWorld", []);
app.directive("ANYTECH", function(){
	return{
		template: <h1>ANYTECH – Levando a tecnologia até você!<h1>
	};
});
</script>
</body>##Highlighter##</at-highlighter>

Gostou? <at-hiperlink>Clique aqui##http://www.facebook.com/anytechOficial/</at-hiperlink>, curta nossa página no <at-negrito>Facebook </at-negrito>e fique por dentro de nossos novos artigos sobre AngularJS.